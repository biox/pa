#!/bin/sh
#
# rotate keys and reencrypt passwords
#
# Reuse identities file: export PA_IDENTITIES=~/.local/share/pa/identities
# Reuse recipients file: export PA_RECIPIENTS=~/.local/share/pa/recipients

die() {
    printf '%s: %s.\n' "$(basename "$0")" "$1" >&2
    exit 1
}

age=$(command -v age || command -v rage) ||
    die "age not found, install per https://age-encryption.org"

age_keygen=$(command -v age-keygen || command -v rage-keygen) ||
    die "age-keygen not found, install per https://age-encryption.org"

# Restrict permissions of any new files to only the current user.
umask 077

: "${PA_DIR:=${XDG_DATA_HOME:-$HOME/.local/share}/pa}"

realstore=$(realpath "$PA_DIR/passwords") ||
    die "couldn't get path to password directory"

tmpdir=$PA_DIR/tmp

mkdir "$tmpdir" ||
    die "couldn't create temporary directory"

trap 'rm -rf "$tmpdir"; exit' EXIT
trap 'rm -rf "$tmpdir"; trap - INT; kill -s INT 0' INT

cp -Rp "$realstore" "$tmpdir/passwords" ||
    die "couldn't copy password directory"

# Remove git repository for forward secrecy.
rm -rf "$tmpdir/passwords/.git"

[ "$PA_IDENTITIES" ] && cp "$PA_IDENTITIES" "$tmpdir/identities"
[ "$PA_RECIPIENTS" ] && cp "$PA_RECIPIENTS" "$tmpdir/recipients"

$age_keygen >>"$tmpdir/identities" 2>/dev/null
$age_keygen -y "$tmpdir/identities" >>"$tmpdir/recipients" 2>/dev/null

pa l | while read -r name; do
    pa s "$name" |
        $age -R "$tmpdir/recipients" -o "$tmpdir/passwords/$name.age" ||
        die "couldn't encrypt $name.age"
done

trap - INT EXIT

rm -rf "$realstore" ||
    die "couldn't remove password directory"

mv "$tmpdir/passwords" "$realstore"
mv "$tmpdir/identities" "$(realpath "$PA_DIR/identities")"
mv "$tmpdir/recipients" "$(realpath "$PA_DIR/recipients")"
rmdir "$tmpdir"

# Recreate git repository if needed.
pa l >/dev/null
