#!/bin/sh
#
# rotate keys and reencrypt passwords

set -e

# Complete any pending
# recipients synchronization.
pa l >/dev/null

: "${PA_DIR:=${XDG_DATA_HOME:-$HOME/.local/share}/pa}"

suffix=$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom |
    dd ibs=1 obs=1 count=10 2>/dev/null)

[ "$suffix" ]

tmp=$PA_DIR/rekey.$suffix

mkdir "$tmp"

trap 'rm -f "$tmp/identities" "$tmp/recipients" "$tmp/passwords/.recipients"
rmdir "$tmp/passwords" "$tmp"' EXIT

cp -p "$PA_DIR/identities" "$tmp/identities"

# Generate recipients for current identities.
PA_DIR=$tmp PA_NOGIT='' pa l >/dev/null

# Filter out recipients corresponding to current identities.
{ grep -Fxvf "$tmp/passwords/.recipients" "$PA_DIR/recipients" ||
    :; } >"$tmp/recipients"

rm -f "$tmp/identities" "$tmp/passwords/.recipients"

# Generate a brand new key pair.
PA_DIR=$tmp PA_NOGIT='' pa l >/dev/null

printf 'add a new generated recipient? [y/N]: ' >&2

[ -t 0 ] && trap 'stty echo icanon; trap - INT; kill -s INT 0' INT

[ -t 0 ] && stty -echo -icanon

answer=$(dd ibs=1 count=1 2>/dev/null)

[ -t 0 ] && stty echo icanon

printf '%s\n' "${answer:-N}" >&2

case $answer in [yY]) ;; *) exit 1 ;; esac

# Ensure files can be decrypted with both
# identities if store is in a partial state.
cat "$tmp/identities" >>"$PA_DIR/identities"

# Recipients are now ready to use.
mv "$tmp/recipients" "$PA_DIR/recipients"

# Reencrypt all passwords
# for new recipients.
pa l >/dev/null

# Old identity is now safe to remove.
mv "$tmp/identities" "$PA_DIR/identities"
