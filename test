#!/bin/sh
#
# test - a pa test script

failures=0
fail() {
    printf "%s\n" "$*"
    failures=$((failures + 1))
}

export PA_DIR=/tmp/pa-test

# clean up previous run
# (the previous state is left around
# intentionally, in case the dev
# wants to poke around)
# that's why we don't clean up on exit
rm -rf /tmp/pa-test

# pa welcomes you
./pa | grep -q "a simple password manager" ||
    fail "pa should print a welcome message"

# generate pa dirs/identityfile/recipientfile
printf n | ./pa list >/dev/null 2>&1

# pa auto-generated files are correct
test -s "$PA_DIR/identities" ||
    fail "an identities file should exist"

test -s "$PA_DIR/recipients" ||
    fail "a recipients file should exist"

test -d "$PA_DIR/passwords/.git" ||
    fail "git dir should exist"
# TODO: ensure git author/email are set correctly, etc

# pa add
printf 'nsecret\nsecret\n' | ./pa add test >/dev/null 2>&1 ||
    fail "pa add should be capable of adding a password"

already_exists_output=$(./pa add test 2>&1) &&
    fail "pa add shouldn't succeed when password exists"

test "$already_exists_output" = "pa: password 'test' already exists." ||
    fail "pa add should say when password already exists"

printf y | ./pa add random >/dev/null 2>&1 ||
    fail "pa add should be capable of generating a password"

test "$(printf y | ./pa add nested/password 2>&1)" = "\
generate a password? [y/N]: y
saved 'nested/password' to the store." ||
    fail "pa add should say it stored nested/password"

test -s "$PA_DIR/passwords/nested/password.age" ||
    fail "pa add should create an encrypted password file"

# pa show
test "$(./pa show test)" = "secret" ||
    fail "pa show should reveal test password"

test "$(./pa show random | wc -c)" = 51 ||
    fail "pa show with generated password should output 50 chars and a newline"

# pa list
./pa list | grep -q test ||
    fail "pa list should list the test password"

test "$(./pa list)" = "nested/password
random
test" ||
    fail "pa list output should match example"

# ensure git commits are working
git -C "$PA_DIR/passwords" log | grep -q "add 'nested/password'" ||
    fail "git log should have line: add 'nested/password'"

# outgoing recipients sync
age-keygen >>"$PA_DIR/identities" 2>/dev/null && rm "$PA_DIR/recipients"

./pa list >/dev/null

test "$(grep -c ^age1 "$PA_DIR/recipients")" = 2 ||
    fail "a recipients file should contain 2 recipients"

ex -sc '1,$-1d|x' "$PA_DIR/identities"

test "$(./pa show test)" = "secret" ||
    fail "new recipient should be able to show existing passwords"

cmp -s "$PA_DIR/recipients" "$PA_DIR/passwords/.recipients" ||
    fail "both recipients files should be equal"

git -C "$PA_DIR/passwords" log | grep -q "change recipients" ||
    fail "git log should have line: change recipients"

# incoming recipients sync
ex -sc '1,$-1d|x' "$PA_DIR/recipients"

printf y | ./pa list 2>&1 | grep "do you trust these recipients?" >/dev/null ||
    fail "pa should ask to add incoming recipients"

cmp -s "$PA_DIR/recipients" "$PA_DIR/passwords/.recipients" ||
    fail "both recipients files should be equal"

test "$(grep -c ^age1 "$PA_DIR/recipients")" = 2 ||
    fail "a recipients file should contain 2 recipients"

ex -sc '1,$-1d|x' "$PA_DIR/recipients"

printf n | ./pa list 2>&1 | grep "do you trust these recipients?" >/dev/null ||
    fail "pa should ask to add incoming recipients"

cmp -s "$PA_DIR/recipients" "$PA_DIR/passwords/.recipients" ||
    fail "both recipients files should be equal"

test "$(grep -c ^age1 "$PA_DIR/recipients")" = 1 ||
    fail "a recipients file should contain 1 recipient"

test "$(git -C "$PA_DIR/passwords" log --format=%s)" = "change recipients" ||
    fail "git repository should have a single commit titled change recipients"

# print info & exit w/ correct status
printf "\ntotal failures: %d\n" "$failures"
test "$failures" -eq 0
